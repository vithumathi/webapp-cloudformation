Description: >
  Vithu Mathi
  Server configuration.
  This template deploys and configure server, security groups, and load-balancer.

Parameters:
  ProjectName:
    Description: Project name prefixed to resource names.
    Type: String

  ServersMinSize:
    Description: Minimum number of web application servers
    Type: String
    Default: "2"

  ServersMaxSize:
    Description: Maximum number of web application servers
    Type: String
    Default: "4"

  ServersDesiredCapacity:
    Description: Desired initial number of web application servers
    Type: String
    Default: "4"

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balancer security group - Allow http to load balancer
      VpcId:
        Fn::ImportValue: !Sub "${ProjectName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web server security group - Allow http to our hosts
      VpcId:
        Fn::ImportValue: !Sub "${ProjectName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ProjectName}-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AmazonS3ReadOnlyAccess
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - arn:aws:s3:::udacity-demo-1
              - arn:aws:s3:::udacity-demo-1/*
      Roles:
        - Ref: UdacityS3ReadOnlyEC2

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: UdacityS3ReadOnlyEC2

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      ImageId: ami-003634241a8fcdec0
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp # replaced it instead of key-pair
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10" #10GB

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${ProjectName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      DesiredCapacity: !Ref ServersDesiredCapacity
      MinSize: !Ref ServersMinSize
      MaxSize: !Ref ServersMaxSize
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${ProjectName}-PUB-SN-1"
        - Fn::ImportValue: !Sub "${ProjectName}-PUB-SN-2"
      SecurityGroups:
        - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: "80"
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "WebAppTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "Listener"
      Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${ProjectName}-VPCID"

Outputs:
  LoadBalancerDNSName:
    Description: DNS Name of the web application
    Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
    Export:
      Name: !Sub "${ProjectName}-DNS-NAME"
